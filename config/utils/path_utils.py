import os
from config.constants import Constants


def GetVirtualEnvDir(projectName: str) -> str:
    """
    Solid way to retrieve the path of the virtual environment directory for a given project.

    Args:
        projectName (str): The name of the project (e.g., "runtime", "editor", "autogen").

    Returns:
        str: The relative path to the virtual environment directory for the specified project (relative to the base directory).
    """
    return os.path.normpath(os.path.join(projectName, "venv"))


def GetAbsoluteVirtualEnvDir(projectName: str) -> str:
    """
    Solid way to retrieve the absolute path of the virtual environment directory for a given project.

    Args:
        projectName (str): The name of the project (e.g., "runtime", "editor", "autogen").

    Returns:
        str: The absolute path to the virtual environment directory for the specified project.
    """
    return os.path.normpath(
        os.path.join(Constants.ABSOLUTE_BASE_DIR, GetVirtualEnvDir(projectName))
    )


def GetAbosolutePythonExecutable(projectName: str) -> str:
    """
    Solid way to retrieve the absolute path of the Python executable within the virtual environment for a given project.
    """
    if Constants.IsWindowsPlatform():
        return os.path.normpath(
            os.path.join(
                GetAbsoluteVirtualEnvDir(projectName),
                "Scripts",
                "python.exe",
            )
        )
    else:
        return os.path.normpath(
            os.path.join(
                GetAbsoluteVirtualEnvDir(projectName),
                "bin",
                "python3",
            )
        )

def GetAbsolutePipExecutable(projectName: str) -> str:
    """
    Solid way to retrieve the absolute path of the pip executable within the virtual environment for a given project.
    """
    if Constants.IsWindowsPlatform():
        return os.path.normpath(
            os.path.join(
                GetAbsoluteVirtualEnvDir(projectName),
                "Scripts",
                "pip.exe",
            )
        )
    else:
        return os.path.normpath(
            os.path.join(
                GetAbsoluteVirtualEnvDir(projectName),
                "bin",
                "pip3",
            )
        )

def GetAbsoluteBuildDir(projectName: str, buildType: str) -> str:
    """
    The solid way to retrieve the absolute path of the build directory for a given C/C++ project.
    This directory is used for storing all the build files generated by CMake.
    """
    return os.path.normpath(
        os.path.join(
            Constants.ABSOLUTE_BASE_DIR,
            projectName,
            "build",
            f"{buildType}",
        )
    )


def GetAbsoluteTemporaryDir() -> str:
    """
    The solid way to retrieve the absolute path of the temporary directory (where the cache files are stored).
    This directory is located at local, not be committed to version control.
    """
    return os.path.normpath(os.path.join(Constants.ABSOLUTE_BASE_DIR, "tmp"))


def CreateRecursiveDirIfNotExists(dirPath: str) -> None:
    """
    Creates a directory and all its parent directories if they do not already exist.

    Parameters
    ----------
    dirPath : str
        The path to the directory to create (relative to the `ABSOLUTE_BASE_DIR`).
    """
    os.makedirs(dirPath, exist_ok=True)
