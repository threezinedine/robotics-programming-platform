macro(RPPOption OPTION_NAME DEFAULT)
    option(${OPTION_NAME} "Enable ${OPTION_NAME}" ${DEFAULT}) 
endmacro()

macro(RPPDefineOption OPTION_NAME DEFAULT)
    RPPOption(${OPTION_NAME} ${DEFAULT})
    if (${OPTION_NAME})
        list(APPEND RPP_OPTION_DEFINES ${OPTION_NAME})
    else()
        list(APPEND RPP_OPTION_DEFINES ${OPTION_NAME})
    endif()
endmacro()

macro(RPPTargetDefines TARGET_NAME)
    foreach(DEFINE_VARIABLE ${RPP_OPTION_DEFINES})
        if(NOT ${${DEFINE_VARIABLE}} STREQUAL "OFF")
            message(STATUS "Adding definition ${DEFINE_VARIABLE}=${${DEFINE_VARIABLE}} to target ${TARGET_NAME}")
            target_compile_definitions(${TARGET_NAME} PUBLIC ${DEFINE_VARIABLE}=${${DEFINE_VARIABLE}})
        else()
            message(STATUS "Skipping definition ${DEFINE_VARIABLE} for target ${TARGET_NAME}")
        endif()
    endforeach()
    
endmacro()


macro(RPPProjectSetup)
    if (NOT RPPProjectSetup_DONE)
        message("-----------------------------------------")
        message(STATUS "Setting up project ${PROJECT_NAME}")
        RPPOption(CMAKE_BUILD_TYPE "Debug")
        RPPDefineOption(RPP_EDITOR OFF)

        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        set(RPP_CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
        set(TEMPORARY_RPP_BASE_DIR "${CMAKE_CURRENT_LIST_DIR}/..")
        cmake_path(SET RPP_BASE_DIR NORMALIZE ${TEMPORARY_RPP_BASE_DIR})

        set_property(GLOBAL PROPERTY USE_FOLDERS ON)

        if (CMAKE_BUILD_TYPE STREQUAL "Debug")
            set(RPP_BUILD_TYPE_DEFINE -DRPP_DEBUG)
            message("=============== Build type: Debug ===============")
<<<<<<< HEAD
            if (CMAKE_GENERATOR STREQUAL "Unix Makefiles" OR CMAKE_GENERATOR STREQUAL "GNU" OR CMAKE_GENERATOR STREQUAL "Clang")
                message("--------------- Using GCC ----------------")
                add_compile_options(-Wno-attributes -Wno-dev -g -O0)
            elseif(MSVC)
                message("--------------- Using MSVC ----------------")
                # add_compile_options(/W3 /bigobj /wd4251 /wd4275 /wd4273 /wd4267 /wd4146 /wd4244 /wd4305)
            else()
                message("--------------- Using unknown compiler ----------------")
=======
            if (GNU)
                add_compile_options(-Wno-attributes -Wno-dev)
            elseif(MSVC)
                # add_compile_options(/W3 /bigobj /wd4251 /wd4275 /wd4273 /wd4267 /wd4146 /wd4244 /wd4305)
>>>>>>> 512a777 ([config] complete adapt with windows)
            endif()
        else()
            set(RPP_BUILD_TYPE_DEFINE -DRPP_RELEASE)
            message("=============== Build type: Release ===============")
        endif()

        set(RPPProjectSetup_DONE TRUE)
    endif()
endmacro()

macro(RPPDetectPlatform)
    if (NOT RPPDetectPlatform_DONE)
        message("----------------------------")
        message(STATUS "Detecting platform...")

        if (WIN32)
            set(RPP_PLATFORM_NAME "Windows")
            list(APPEND RPP_PLATFORM_DEFINES -DRPP_PLATFORM_WINDOWS)
        elseif(APPLE)
            set(RPP_PLATFORM_NAME "MacOS")
            list(APPEND RPP_PLATFORM_DEFINES -DRPP_PLATFORM_MACOS)
        elseif(UNIX)
            set(RPP_PLATFORM_NAME "Linux")
            list(APPEND RPP_PLATFORM_DEFINES -DRPP_PLATFORM_LINUX)
        elseif(CMAKE_SYSTEM_NAME STREQUAL "Android")
            set(RPP_PLATFORM_NAME "Android")
            list(APPEND RPP_PLATFORM_DEFINES -DRPP_PLATFORM_ANDROID)
        else()
            message(FATAL_ERROR "Unsupported platform")
        endif()

        message(STATUS "Detected platform: ${RPP_PLATFORM_NAME}")

        set(RPPDetectPlatform_DONE TRUE)
    endif()
endmacro()

macro(MarkAutogenTarget TARGET_NAME)
    add_dependencies(${TARGET_NAME} Autogen)
endmacro()