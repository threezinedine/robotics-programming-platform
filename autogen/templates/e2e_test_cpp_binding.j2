#include <pybind11/pybind11.h>
#include <pybind11/embed.h>
#include "core/core.h"
#include "modules/modules.h"
#include "applications/applications.h"

namespace py = pybind11;
using namespace rpp;

namespace pybind11
{
namespace detail
{
    template <>
    struct type_caster<String>
    {
        PYBIND11_TYPE_CASTER(String, _("str"));

        static handle
        cast (const String &src, return_value_policy /* policy */, handle /* parent */)
        {
            return pybind11::cast<std::string>(std::string(src.CStr())).release();
        }

        bool load(handle src, bool)
        {
            if (!py::isinstance<py::str>(src))
            {
                return false;
            }

            value = String(std::string(py::str(src)).c_str());
            return true;
        }
    };
}
}

PYBIND11_MODULE(Engine, m) {
    {% include "e2e_test_cpp_function_binding.j2" %}

    {% include "e2e_test_cpp_class_binding.j2" %}

    m.attr("CommandStack") = &TestSystem::GetInstance()->GetCommandStack();

    m.def("Wait", [](f32 milliseconds) {
        TestSystem::GetInstance()->GetCommandStack().Push(Command::COMMAND_WAIT);
    }, "Waits for the specified number of milliseconds.");
}